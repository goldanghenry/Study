# 소수의 판별
# 출처 : 이것이 코딩테스트다_나동빈

# 1) 약수의 특징을 이용
# -> 가운데 약수(n의 제곱근)까지만 검사
# -> 시간 복잡도 : O(x^(1/2))

import math

def is_prime_number(x):
    # 2부터 (x-1)까지 모든 수를 확인하며
    for i in range(2,int(math.sqrt(x))+1):
        # x가 해당 수로 나누어 떨어진다면
        if x % i == 0:
            return False
        return True
    print(is_prime_number(4))
    print(is_prime_number(7))


#--------------------------------------------------------------------------------------------------
# 2) 에라토스테네스의 체 알고리즘
# -> N보다 작거나 같은 모든 소수를 찾을 때 사용
# -> (1) 2부터 N까지의 모든 자연수를 나열한다
# -> (2) 남은 수 중에서 아직 처리하지 않은 가장 작은 수 i를 찾는다.
# -> (3) 남은 수 중에서 i의 배수를 모두 제거한다( i는 제거하지 않는다 )
# -> (4) 더 이상 반복할 수 없을 때까지 (2)번과 (3)번의 과정을 반복한다.

# 1부터 N까지의 모든 소수를 출력하는 프로그램
# i는 N의 제곱근까지만 증가
# 1부터 시작하라는 경우 array[1] == False // 1은 소수가 아니다

n = 1000 # 2부터 1,000까지의 모든 수에 대하여 소수 판별
array = [True for i in range(n+1)] # 처음엔 모든 수가 소수(True)인 것으로 초기화(0과 1제외)

# 에라토스테네스의 체 알고리즘
for i in range(2,int(math.sqrt(n))+1):  # 2부터 n의 제곱근까지의 모든 수를 확인하며
    if array[i] == True:    # i가 소수인 경우(남은 수인 경우)
        # i를 제외한 i의 모든 배수를 지우기
        j = 2
        while i * j <= n:
            array[i*j] = False
            j+= 1
# 모든 소수 출력
for i in range(2,n+1):
    if array[i]:
        print(i,end=' ')


