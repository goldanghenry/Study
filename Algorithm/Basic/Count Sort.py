# 계수 정렬Count Sort
# 특정한 조건이 부합할 때만 사용할 수 있지만, 매우 빠른 정렬 알고리즘.
#
# 모든 데이터가 양의 정수인 상황 가정. 데이터의 개수가N, 데이터 중 최대값이 K, 
#  ->최악의 경우라도 O(N+K)를 보장
# 조건 : 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용가능
# 일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적으로 사용할 수 있다.
# ex) 0 이상 100 이하인 성적 데이터를 정렬할 때 계수 정렬이 효과적
#	-> 모든 범위를 담을 수 있는 크기의 리스트(배열)를 선언해야하기 때문 -> 초기화
#	- 비교 기반의정렬 알고리즘(선택, 삽입, 퀵)이 아님
#     별도의 리스트를 선언하고 그 안에 정렬에 대한 정보를 담는다

# 모든 원소의 값이 0보다 크거나 같다고 가정
array =  [ 7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2 ]
# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array)+1)

for i in range(len(array)):
    count[array[i]] += 1    # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)): # 리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i, end=' ')   # 띄어쓰기를 구분으로 등장한 횟부만큼 인덱스 출력

# 	 계수정렬의 시간 복잡도
#	- O(N+K) : 리스트에서 적절한 인덱스의 값을 1씩 증가, 추후에 리스트의 각 인덱스에 해당하는 값들 확인할 때, 데이터의 최댓값의 크기만큼 반복한다.
#	- 데이터의 범위만 한정되어 있다면 효과적으로 사용할 수 있고 항상 빠르게 동작한다
#	- 현존하는 정렬 알고리즘 중에서 기수 정렬(Radix Sort)과 더불가 가장 빠르다.
#     기수 정렬은 계수 정렬에 비해 동작은 느리지만, 처리할 수 있는 정수의 크기는 더 크다(알고리즘 원리나 소스 코드는 더 복잡)
