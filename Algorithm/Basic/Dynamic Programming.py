# Dynamic Programming
# 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법

# 사용조건
# 1) 큰 문제를 작은 문제로 나눌 수 있다
# 2) 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다

# 피보나치 수열(Top-Down)
# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)을 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

print(fibo(99))

# 피보나치 수열(Bottom-Up)
# 단순히 반복문을 이용하여 소스코드를 작성하는 경우 작은 문제부터 차근차근 답을 도출
d = [0] * 100
# 첫 번째, 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현
for i in range(3,n+1):
    d[i] = d[i-1] + d[i-2]

print(d[n])

#	  탑다운(메모이제이션) : 하향식 / 보텀업(DP 테이블) : 상향식
#	**메모이제이션 : 이전에 계산된 결과를 일시적으로 기록해놓은 넓은 개념
#	- 보통 배열이나 리스트로 하지만 때에 따라 사전 자료형을 이용하기도 한다.
#	  사전 형은 수열처럼 연속적이지 않은 경우 유용함. a_n을 게산할 때, a_0 ~ a_n-1이 아닌 일부만 필요할 때 효과적
	
#	- 주어진 문제가 다이나믹 프로그래밍 유형임을 먼저 파악하기. 특정한 문제를 완전 탐색 알고리즘으로 접근했을 때
#	  시간이 매우 오래 걸리면 다이나믹 프로그래밍을 적용할 수 있는지, 부분 문제들의 중복 여부를 확인
#	- 단순히 재귀 함수로 비효율적인 프로그램 작성 뒤 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 즉 메모이제이션을 할 수 있다면 적용
#	- 가능하다면 재귀 함수를 이용하는 탑다운 방식보다는 보텀업 방식으로 구현하는 것을 권장
#     시스템 상에서 재귀 함수의 스택 크기가 한정되어 있을 수 있기 때문